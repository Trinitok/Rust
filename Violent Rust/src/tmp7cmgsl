extern crate getopts;

use getopts::Options;
use std::env;
use std::net::{TcpStream, IpAddr, Ipv4Addr, Ipv6Addr};
use std::thread;

// fn connScan(tgtHost: &str, tgtPort: &str)  {
// 	let stream = TcpStream::connect((tgtHost, tgtPort.parse().unwrap())).expect("couldnt connect to server");
    
// 	println!("open connection found on {}", tgtPort.parse().unwrap());

//     stream.write(b"test").unwrap();
//     stream.read()  //  ignore this we are only trying to send stuff to the server

// }

// def portScan(tgtHost: &str, tgtPorts: Vec<String>){
// 	for port in tgtPorts{
// 		println!("Scanning: {}", port);
// 		connScan(tgtHost, port);
// 	}
// }

fn print_usage(program: &str, opts: Options) {
    let brief = format!("Usage: {} stuff", program);
    print!("{}", opts.usage(&brief));
}

fn main() {

	let args_vec: Vec<String> = env::args().collect();

	let mut opts = Options::new();
    opts.optopt("H", "host", "set target host name", "Host Name");
    opts.optopt("p", "port", "set target port number", "Port Number");
    opts.optflag("h", "help", "print this help menu");

    //  parse the command line args.  the first arg is the program itself
    let matches = match opts.parse(&args_vec[1..]) {
        Ok(m) => { m }
        Err(f) => { panic!(f.to_string()) }
    };
    if matches.opt_present("ho") {
        print_usage(&args_vec[0].clone(), opts);
        return;
    }

    let host = matches.opt_str("H").unwrap();

    println!("Does this print? {}", host);

    // let port = matches.opt_str("p")

	
	
}