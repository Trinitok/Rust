extern crate getopts;

use getopts::Options;
use std::env;
use std::net::{TcpStream, IpAddr, Ipv4Addr, Ipv6Addr};
use std::thread;

fn print_usage(program: &str, opts: Options) {
    let brief = format!("Usage: {} stuff", program);
    print!("{}", opts.usage(&brief));
}

fn main() {

	let args_vec: Vec<String> = env::args().collect();

	let mut opts = Options::new();
    opts.optopt("H", "host", "set target host name", "Host Name");
    opts.optopt("p", "port", "set target port number", "Port Number");
    opts.optopt("t", "threads", "set number of threads", "thread number")
    opts.optflag("h", "help", "print this help menu");

    //  parse the command line args.  the first arg is the program itself
    let matches = match opts.parse(&args_vec[1..]) {
        Ok(m) => { m }
        Err(f) => { panic!(f.to_string()) }
    };

    //  if the user needs to see how to register for help
    if matches.opt_present("h") {
        print_usage(&args_vec[0].clone(), opts);
        return;
    }

    let host = matches.opt_str("host").unwrap();
    

    let port = matches.opt_str("p");

    let num_threads = matches.opt_str("t");

    let (tx, rx) = channel();
	
	for i in 0 .. num_threads{
        let tx = tx.clone
    }
}